/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import {
  InitializeMyStateIxData,
  initializeMyStateIxDataBeet,
} from '../types/InitializeMyStateIxData'

/**
 * @category Instructions
 * @category InitializeState
 * @category generated
 */
export type InitializeStateInstructionArgs = {
  initializeMyStateIxData: InitializeMyStateIxData
}
/**
 * @category Instructions
 * @category InitializeState
 * @category generated
 */
export const InitializeStateStruct = new beet.BeetArgsStruct<
  InitializeStateInstructionArgs & {
    instructionDiscriminator: number
  }
>(
  [
    ['instructionDiscriminator', beet.u8],
    ['initializeMyStateIxData', initializeMyStateIxDataBeet],
  ],
  'InitializeStateInstructionArgs'
)
/**
 * Accounts required by the _InitializeState_ instruction
 *
 * @property [_writable_, **signer**] payerAcc
 * @property [_writable_] stateAcc
 * @property [] sysvarRentAcc
 * @property [] systemProgramAcc
 * @category Instructions
 * @category InitializeState
 * @category generated
 */
export type InitializeStateInstructionAccounts = {
  payerAcc: web3.PublicKey
  stateAcc: web3.PublicKey
  sysvarRentAcc: web3.PublicKey
  systemProgramAcc: web3.PublicKey
}

export const initializeStateInstructionDiscriminator = 0

/**
 * Creates a _InitializeState_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category InitializeState
 * @category generated
 */
export function createInitializeStateInstruction(
  accounts: InitializeStateInstructionAccounts,
  args: InitializeStateInstructionArgs,
  programId = new web3.PublicKey('ENrRns55VechXJiq4bMbdx7idzQh7tvaEJoYeWxRNe7Y')
) {
  const [data] = InitializeStateStruct.serialize({
    instructionDiscriminator: initializeStateInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.payerAcc,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.stateAcc,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.sysvarRentAcc,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgramAcc,
      isWritable: false,
      isSigner: false,
    },
  ]

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
